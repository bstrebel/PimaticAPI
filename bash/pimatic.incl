#!/bin/bash
#
# pimatic api scripting library
#

PIMATIC_INCL_REV="0.9.1"

# try to load pimatic credentials from configuration file before paring config.json
[ -f ~/.pimatic/pimatic.conf ] && source ~/.pimatic/pimatic.conf || {

    [ -f /usr/local/etc/pimatic.conf ] && source /usr/local/etc/pimatic.conf
}

# pimatic root directory with config.json
[ "$PIMATIC_ROOT" ] || PIMATIC_ROOT=$( pwd )

[ "$PIMATIC_USER" ] || { 
	PIMATIC_USER=$( jq -rj '.users | map(select(.role == "admin"))[0] | .username+":",.password' $PIMATIC_ROOT/config.json ) || exit 1
}
[ "$PIMATIC_PORT" ] || {
	PIMATIC_PORT=$( jq '.settings.httpServer.port' $PIMATIC_ROOT/config.json ) || exit 2
}
[ "$PIMATIC_URL" ] || {
	PIMATIC_URL="http://localhost:$PIMATIC_PORT"
}

###########################
### low level api calls ###
###########################

function check_result() {

	echo "$1" && [ "$(echo $1 | jq -r '.success')" == "true" ]
}

###########################

function pimatic_get() {

	local path="$1"

	RESULT="$( curl --silent --user "$PIMATIC_USER" --request GET ${PIMATIC_URL}${path} )" || return $?
    check_result "$RESULT"
}

function pimatic_delete() {

	local path="$1"

	RESULT=$( curl --silent --user "$PIMATIC_USER" --request DELETE ${PIMATIC_URL}${path} )
    check_result "$RESULT"
}

function pimatic_post() {

	local path="$1" data="$2"	
	
	RESULT=$( curl --silent --user "$PIMATIC_USER" --header "Content-Type:application/json" --header "Accept:application/json" --request POST --data "$data" ${PIMATIC_URL}${path} )
    check_result "$RESULT"
}

function pimatic_patch() {

	local path="$1" data="$2"	
	
	RESULT=$( curl --silent --user "$PIMATIC_USER"	--header "Content-Type:application/json" --header "Accept:application/json" --request PATCH	--data "$data" ${PIMATIC_URL}${path} )
    check_result "$RESULT"
}

#########################################
### high level wrappers for api calls ###
#########################################

function pimatic_get_variable() {

    local var="$1" val=""

    val=$(pimatic_get /api/variables/$var | jq -r '.variable.value') || return
    [ "$val" == "null"  ] && echo "" || echo $val
}

function pimatic_set_variable() {

    local var="$1" val="$2"

    RESULT=$(pimatic_patch /api/variables/$var "{\"type\": \"value\", \"valueOrExpression\": \"$val\"}") || return
}

function pimatic_alive() {

    netstat -atnp | grep -q ":::$PIMATIC_PORT"
}
